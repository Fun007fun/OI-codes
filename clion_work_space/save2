/*
作者:千里冰封
*/

#include <stdio.h>

const int size = 500 + 5;

int n, m, s, t;
int min_distance[size][size];
int max_distance[size][size];

int min(int x, int y) {
	return x > y ? y : x;
}

double min_with_double(double x, double y, double z) {
	return x > y / z ? y / z : x;
}

int max(int x, int y) {
	return x < y ? y : x;
}

void init() {
	freopen("village.in", "r", stdin);
	freopen("village.out", "w+", stdout);
}

int main(int argc, char *argv[]) {
	init();
	int i, j, k;
	scanf("%i %i", &n, &m);
	for ( i = 0; i < m; i++ ) {
		int a, b, l;
		scanf("%i %i %i", &a, &b, &l);
		min_distance[a][b] = l;
		min_distance[b][a] = l;
		max_distance[a][b] = l;
		max_distance[b][a] = l;
	}
	for ( k = 1; k <= n; k++ )
		for ( i = 1; i <= n; i++ )
			for ( j = 1; j <= n; ++j ) {
				min_distance[i][j] = min(
						min_distance[i][j],
						min_distance[i][k] + min_distance[k][j]
				);
				max_distance[i][j] = max(
						max_distance[i][j],
						max_distance[i][k] + max_distance[k][j]
				);
			}
	scanf("%i %i", &s, &t);
	int x, y;

	return 0;
}



#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct node {
	char me;
	node *next[26];
} node;

node *root;

char source[50010];

void build (int index, node *this_root) {
	if ( index >= strlen(source)) return;
	int i, j, k;
	for ( i = index; i < strlen(source); ++i ) {
		if(!this_root->next[source[i] - 'a']) {
			node *next = ( node * ) malloc(sizeof(node));
			next->me = source[i];
			this_root->next[source[i] - 'a'] = next;
			build(i, next);
		}
	}
}

void output(node *now) {
	int i;
	for ( i = 0; i < 25; ++i ) {
		printf("%c", now->me);
		if(now->next[i]) {
			output(now->next[i]);
		}
	}
}

int main (int argc, char *argv[]) {
//	freopen("circle.in", "r", stdin);
//	freopen("circle.out", "w+", stdout);
	scanf("%s", source);
	root->me = source[0];
	build(0, root);
	return 0;
}

/*
3
1 2 80
2 3 80
3 1 20
 */
